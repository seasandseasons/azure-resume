name: deploy

on: 
  workflow_call:
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  id-token: write
  contents: read

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:        
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Logs into Azure
      - uses: azure/login@v1
        name: Sign in to Azure
        with: 
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Uses ARM preflight validation to check for problems   
      - uses: azure/arm-deploy@v1
        name: Run preflight validation
        with:
          scope: subscription
          region: eastus2
          deploymentName: ${{ github.run_number }}
          template: ./deploy/main.bicep
          parameters: ./deploy/main.parameters.json
          deploymentMode: Validate
  
  preview:
    runs-on: ubuntu-latest
    needs: validate
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
    
      # Logs into Azure
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    # Uses ARM preflight validation to check for problems
      - uses: azure/arm-deploy@v1
        name: Run what-if
        with:
          scope: subscription
          region: eastus2
          failOnStdErr: false
          template: ./deploy/main.bicep
          parameters: ./deploy/main.parameters.json
          # additionalArguments: --what-if

  copyFiles:
    runs-on: ubuntu-latest
    needs: preview
    steps:

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      
      # Logs into Azure
      - uses: azure/login@v1
        name: Sign in to Azure
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Runs Azure CLI to copy files to container    
      - uses: azure/CLI@v1
        name: Copy files to container
        with:
          inlineScript: |
            # Set the resource group name and storage account name
            RESOURCE_GROUP_NAME="rg-azureResume"
            STORAGE_ACCOUNT_NAME="ashearinresumeproject"

            # Get the storage account and store it in a variable
            STORAGE_ACCOUNT=$(az storage account show --name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP_NAME --output tsv)

            # Extract the storage account context from the storage account variable
            STORAGE_ACCOUNT_CONTEXT=$(echo $STORAGE_ACCOUNT | jq -r '.secondaryEndpoints.blob'

            # Enable static website hosting and set the index document and error document
            az storage blob service-properties update --account-name $STORAGE_ACCOUNT_NAME --static-website --404-document 404.html --index-document index.html --context $STORAGE_ACCOUNT_CONTEXT

            az storage blob upload-batch --account-name $STORAGE_ACCOUNT_NAME -d '$web' -s frontend/